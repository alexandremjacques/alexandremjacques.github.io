<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Today We Learned - Programming</title><link href="https://alexandremjacques.github.io/" rel="alternate"></link><link href="https://alexandremjacques.github.io/feeds/programming.atom.xml" rel="self"></link><id>https://alexandremjacques.github.io/</id><updated>2020-06-24T11:36:00-03:00</updated><entry><title>Feature Flags e porque são importantes</title><link href="https://alexandremjacques.github.io/feature-branching-and-why-it-is-important.html" rel="alternate"></link><published>2020-06-24T11:36:00-03:00</published><updated>2020-06-24T11:36:00-03:00</updated><author><name>Alexandre Jacques</name></author><id>tag:alexandremjacques.github.io,2020-06-24:/feature-branching-and-why-it-is-important.html</id><summary type="html">&lt;h1&gt;Flags vs Branching&lt;/h1&gt;
&lt;p&gt;Desenvolvimento baseado em &lt;em&gt;branches&lt;/em&gt; permite que os desenvolvedores colaborem em torno de uma base central de código mantendo mudanças de uma funcionalidade isoladas na sua própria branch. Com a adição de &lt;em&gt;feature flags&lt;/em&gt;, branches de funcionalidade se tornam ainda mais poderosas e gerenciáveis já que conseguimos separar …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Flags vs Branching&lt;/h1&gt;
&lt;p&gt;Desenvolvimento baseado em &lt;em&gt;branches&lt;/em&gt; permite que os desenvolvedores colaborem em torno de uma base central de código mantendo mudanças de uma funcionalidade isoladas na sua própria branch. Com a adição de &lt;em&gt;feature flags&lt;/em&gt;, branches de funcionalidade se tornam ainda mais poderosas e gerenciáveis já que conseguimos separar a entrega de funcionalidades do deploy do código.&lt;/p&gt;
&lt;h2&gt;As dores de branches de longa duração&lt;/h2&gt;
&lt;p&gt;Tradicionalmente, o desenvolvimento de novas funcionalidades tem sido feito via branches. E, essas branches, dependendo da funcionalidade, podem perdurar por meses a fio com o restante do desenvolvimento do produto acontecendo em paralelo. Branches de vida longa normalmente criam um débito técnico do tipo "eu prometo que vou resolver esses conflitos depois". Isso se contrapõe com a premissas do Git que seriam: minimizar os problemas de conflitos de merge, falta de dependências e código duplicado. Pior, esses débitos aumentam proporcionalmente ao tempo de duração da branch. Então, acabamos concentrando esforços do time em resolver conflitos de merge. Para minimizar esse tipo de problema, branches combinadas com &lt;em&gt;feature flags&lt;/em&gt; permitem que os desenvolvedores consigam gerenciar branches de forma efetiva e continuem entregando valor e software de qualidade.&lt;/p&gt;
&lt;h2&gt;Feature Branching&lt;/h2&gt;
&lt;p&gt;Como ajuda no processo de desenvolvimento, times de engenharia adotaram os DVCS - &lt;em&gt;sistemas de controle de versão distribuídos&lt;/em&gt; - como o GitHub e Bitbucket. Esses sistemas permitem a colaboração de desenvolvedores em torno de uma base de código comum e fazem o uso de branches para o desenvolvimento de melhorias e novas funcionlidades. Esse modelo se tornou a base do ciclo de desenvolvimento moderno porque permite que os desenvolvedores não fiquem "se esbarrando" no progresso de outros desenvolvedores.&lt;/p&gt;
&lt;p&gt;Um problema desse modelo de feature branches é que o &lt;strong&gt;gerenciamento de releases&lt;/strong&gt; fica diretamente relacionado ao deployment do código. Isoladamente, feature branching força os engenheiros a gerenciar as entregas dentro das limitações do sistema de versionamento. Usuários não-técnicos não conseguem (e não deveriam) gerenciar a liberação de funcionalidades a partir do sistema de controle de versão. E, nesse modelo, não é possível ligar e desligar funcionalidades em tempo real com o sistema já em produção.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Branching sem FF" src="images/feature_branch_wo_ff.png"&gt;&lt;/p&gt;
&lt;h2&gt;Entra em cena &lt;em&gt;Feature Flags&lt;/em&gt;&lt;/h2&gt;
&lt;p&gt;É por isso que a introdução de &lt;em&gt;feature flags&lt;/em&gt; faz com que o modelo de branching se torne interessante. FF (&lt;em&gt;feature flags&lt;/em&gt;) permitem que os desenvolvedores tomem controle total do ciclo de vida de funcionalidades independente do deploy do código. Funcionalidades do sistema podem ser ligadas ou desligadas de forma independente da &lt;strong&gt;release&lt;/strong&gt; ou rollback de versões.&lt;/p&gt;
&lt;p&gt;Esse processo é conhecido como &lt;strong&gt;Feature Flag Driven Development&lt;/strong&gt;, onde os times de funcionalidades fazem entregas contínuas independentes de deploy de código.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Branching sem FF" src="images/feature_branch_wt_ff.png"&gt;&lt;/p&gt;
&lt;h2&gt;Benefícios&lt;/h2&gt;
&lt;p&gt;Quando uma nova funcionalidade é mergeada para a branch principal (produção), ela já deveria estar acondicionada em uma FF. Isso permite que seja feito um deploy com a funcionalidade desligada e, gradualmente, liberada para os usuários finais. Isso permite também uma maneira rápida de desligar a funcionlidade em caso de defeito evitando assim, um novo deployment. Outros benefícios incluem:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Melhor comunicação do time&lt;/strong&gt;: o trabalho é focado em novas funcionalidades e não em gerencimento de código, o time consegue garantir que todos estão coordenando esforços e entregando valor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Deployments lógicos&lt;/strong&gt;: liberação de código para produção mesmo que o desenvolvimento de uma nova funcionalidade não esteja totalmente completo pois vive numa branch de vida longa. Basta desligar a FF referente a ela e ainda assim a funcionalidade pode ser enviada.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exposição de dependências&lt;/strong&gt;: branchs que tem vida mais curta facilitam o gerenciamento de dependências eliminando as que não são mais necessárias.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Desenvolvimento mais rápido&lt;/strong&gt;: não tendo que se preocupar com conflitos de merge e refatoração de código que eventualmente tenha quebrado devido a um merge mal-sucedido, o time pode forcar no desenvolvimento de novas funcionalidades que geram valor.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mitigação de riscos&lt;/strong&gt;: uma funcionalidade pode ser "flagada" durante todo o ciclo de desenvolvimento, desde a máquina do desenvolvedor, QA, staging e produção. Isso significa que ela pode ser ligada ou desligada de forma isolada e independente do ambiente e sem causar impactos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Code reviews&lt;/em&gt; melhores&lt;/strong&gt;: como o merge de branches pode ser feito de forma contínua e em intervalos menores, os &lt;em&gt;code reviews&lt;/em&gt; ficam menos tediosos e os conflitos de merge (lembrando que eles sempre vão existir) tem menos impacto.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;E como funciona na prática?&lt;/h2&gt;
&lt;p&gt;A ilustração abaixo mostra, resumidamente, como um mecanismo de FF deve se comportar. Existem variações do modelo mostrado mas, basicamente, a ideia é a mesma: durante a inicialização ou execução do produto, um gerenciador de FF (FFM) deve ser consultado para determinar quais funcionalidades devem ser mostradas/ativas ou não. Idealmente o gerenciador deve ser capaz de configurar diversas flags, em diversos ambientes e diversas condições. Ex.: para o ambiente de desenvolvimento, a &lt;strong&gt;Feature A&lt;/strong&gt; deve estar &lt;strong&gt;habilitada&lt;/strong&gt; para os usuários que sejam do &lt;strong&gt;Tipo XYZ&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Feature Flag" src="images/feature_flag.png"&gt;&lt;/p&gt;
&lt;p&gt;Essas confugurações podem ser mudadas a qualquer instante (por temos um gerenciador central) permitindo mudanças rápidas e sem necessidade de um novo deploy de código. &lt;/p&gt;
&lt;h2&gt;Juntos e melhores&lt;/h2&gt;
&lt;p&gt;Sistemas modernos de versionamento de código combinam os benefícios de branches e FFs. Ferramentas como GitHub ou Bitbucket permitem entrega contínua e branches de vida curta, enquanto FF ajudam na mitigação de riscos e gerencimento de &lt;strong&gt;releases&lt;/strong&gt; e não de código.&lt;/p&gt;
&lt;p&gt;Portanto, FF &lt;strong&gt;não substituem branching&lt;/strong&gt;. FFs são um aliado que dá poder e flexibilidade ao modelo de branching. Essa flexibilidade vem da capacidade de decidir quais, quando e para quem funcionalidades serão disponibilizadas.&lt;/p&gt;</content><category term="Programming"></category><category term="xp programming"></category><category term="programming"></category><category term="agile"></category><category term="modern"></category></entry></feed>